#version 450
// [UBO 0]視錐台平面情報
layout(std140, binding = 0) uniform FrustumPlanes {
    vec4 planes[6];
} frustumPlanes;

// [SSBO 1] Min
layout(std430, binding = 1) readonly buffer MinPosition {
    vec4 minPosition[];  // (x, y, z, 0)
};

// [SSBO 2] Max
layout(std430, binding = 2) readonly buffer MaxPosition {
    vec4 maxPosition[];  // (x, y, z, 0)
};

// [SSBO 3]可視オブジェクトのインデックス
layout(std430, binding = 3) buffer VisibleObjects {
    uint visibleIndices[];
};

void main() 
{
    uint id = gl_GlobalInvocationID.x;
    vec3 aabbMin = minPosition[id].xyz;
    vec3 aabbMax = maxPosition[id].xyz;

    // Frustum Culling判定 (AABB)
    bool visible = true;
    for (int i = 0; i < 6; i++) 
    {
        vec4 plane = frustumPlanes.planes[i];
        // AABBの最も外側の点を求める
        vec3 pVertex = vec3(
            (plane.x >= 0.0) ? aabbMax.x : aabbMin.x,
            (plane.y >= 0.0) ? aabbMax.y : aabbMin.y,
            (plane.z >= 0.0) ? aabbMax.z : aabbMin.z           
        );
        if (dot(plane.xyz, pVertex) + plane.w < 0.0) 
        {
            visible = false;
            break;
        }
    }
    // 画面に入ってる
    if (visible) 
    {
        visibleIndices[id] = 1;
    }
}