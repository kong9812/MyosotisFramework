#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : enable

#include "Loader/VertexDataLoader.glsl"
#include "Loader/MainCameraDataLoader.glsl"
#include "SSBO/StandardSSBO.glsl"
#include "Culling/FrustumCulling.glsl"

layout(push_constant) uniform PushConstant {
    uint testMeshletCount;
    uint empty;
};

struct TaskShaderToMeshShaderData
{
    uint _using;
    uint objectIndex;
    uint meshIndex; //todo.Meshlet化
    uint meshletIndex;
};
layout (std430, set = 1, binding = 5) buffer TaskShaderToMeshShaderDataBuffer {
    TaskShaderToMeshShaderData taskShaderToMeshShaderDatas[];
};

void main()
{
    uint objectIndex = 1;    // todo. 今は何番目を使うかはわからない

    RawDataMetaData meta = RawDataLoader_GetRawDataMetaData(objectIndex);
    MainCameraData cameraData = MainCameraDataLoader_GetMainCameraData();
    StandardSSBO standardSSBO = StandardSSBO_LoadStandardSSBO(meta.dataOffset + 0);
    MeshData meshData = VertexDataLoader_GetMeshData(standardSSBO.meshDataIndex);


    OBBData obbData = FrustumCulling_CreateOBBData(meshData.AABBMin.xyz, meshData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.rotation.xyz, standardSSBO.scale.xyz);
    debugPrintfEXT("scale:\n x: %f y: %f z: %f", standardSSBO.scale.x, standardSSBO.scale.y, standardSSBO.scale.z);

    uint meshletCount = 0;
    if (FrustumCulling_IsVisible(obbData))
    {
        // 画面に入ってる
        for (uint i = 0; i < meshData.meshletMetaDataCount; i++)
        {
            MeshletMetaData meshletMetaData = VertexDataLoader_GetMeshletMetaData(standardSSBO.meshDataIndex, i);

            OBBData meshletObbData = FrustumCulling_CreateOBBData(meshletMetaData.AABBMin.xyz, meshletMetaData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.rotation.xyz, standardSSBO.scale.xyz);
            // SphereData sphereData = FrustumCulling_CreateBoundingSphere(meshletMetaData.AABBMin.xyz, meshletMetaData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.scale.xyz);
            
            //if (FrustumCulling_IsVisible_Sphere(sphereData))
            if (FrustumCulling_IsVisible(meshletObbData))
            {
                taskShaderToMeshShaderDatas[meshletCount]._using = 1;
                taskShaderToMeshShaderDatas[meshletCount].objectIndex = objectIndex;
                taskShaderToMeshShaderDatas[meshletCount].meshIndex = standardSSBO.meshDataIndex; // todo. stardardSSBOから取れるように
                taskShaderToMeshShaderDatas[meshletCount].meshletIndex = i; // todo. それぞれmeshletをカリングして、そこでとれるように        
                debugPrintfEXT("OK Task: %d MeshletID: %d", meshletCount, i);
                meshletCount++;
            }
            else
            {
                taskShaderToMeshShaderDatas[i]._using = 0;
            }
        }
    }
    if (meshletCount > 0)
    {
        debugPrintfEXT("render meshletCount: %d", meshletCount);
        EmitMeshTasksEXT(meshletCount, 1, 1);
    }
}