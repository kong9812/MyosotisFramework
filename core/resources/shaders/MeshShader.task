#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : enable

#include "Loader/RawDataLoader.glsl"
#include "Loader/VertexDataLoader.glsl"
#include "Loader/MainCameraDataLoader.glsl"
#include "Culling/FrustumCulling.glsl"

layout(push_constant) uniform PushConstant {
    uint StandardSSBOCount;
    uint empty;
};

struct Payload {
    uint StandardSSBOIndex;
    uint MeshletIndex[2000];
};
// max: 16kb
taskPayloadSharedEXT Payload payload;

layout (std430, set = 1, binding = 6) buffer MeshletCountBuffer {
    uint meshletCount;
};

void main()
{
    uint standardSSBOIndex = gl_WorkGroupID.x;

    MainCameraData cameraData = MainCameraDataLoader_GetMainCameraData();
    StandardSSBO standardSSBO = RawDataLoader_LoadStandardSSBO(standardSSBOIndex);
    MeshData meshData = VertexDataLoader_GetMeshData(standardSSBO.meshDataIndex);

    OBBData obbData = FrustumCulling_CreateOBBData(meshData.AABBMin.xyz, meshData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.rotation.xyz, standardSSBO.scale.xyz);

    uint localMeshletCount = 0;
    if (FrustumCulling_IsVisible(obbData))
    {
        // 画面に入ってる
        for (uint i = 0; i < meshData.meshletMetaDataCount; i++)
        {
            MeshletMetaData meshletMetaData = VertexDataLoader_GetMeshletMetaData(standardSSBO.meshDataIndex, i);

            OBBData meshletObbData = FrustumCulling_CreateOBBData(meshletMetaData.AABBMin.xyz, meshletMetaData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.rotation.xyz, standardSSBO.scale.xyz);
            // SphereData sphereData = FrustumCulling_CreateBoundingSphere(meshletMetaData.AABBMin.xyz, meshletMetaData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.scale.xyz);
            
            //if (FrustumCulling_IsVisible_Sphere(sphereData))
            if (FrustumCulling_IsVisible(meshletObbData))
            {
                payload.MeshletIndex[localMeshletCount] = i;
                localMeshletCount++;
            }
        }
    }
    barrier();
    if (localMeshletCount > 0)
    {
        payload.StandardSSBOIndex = standardSSBOIndex;
        EmitMeshTasksEXT(localMeshletCount, 1, 1);
    }
}