#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : enable

#include "Loader/RawDataLoader.glsl"
#include "Loader/VertexDataLoader.glsl"
#include "Loader/MainCameraDataLoader.glsl"
#include "Culling/FrustumCulling.glsl"

layout(push_constant) uniform PushConstant {
    uint StandardSSBOCount;
    uint empty;
};

struct TaskShaderToMeshShaderData
{
    uint _using;
    uint objectIndex;
    uint meshIndex; //todo.Meshlet化
    uint meshletIndex;
};
layout (std430, set = 1, binding = 5) buffer TaskShaderToMeshShaderDataBuffer {
    TaskShaderToMeshShaderData taskShaderToMeshShaderDatas[];
};
layout (std430, set = 1, binding = 6) buffer MeshletCountBuffer {
    uint meshletCount;
};

void main()
{
    uint objectIndex = gl_WorkGroupID.x;    // todo. 今は何番目を使うかはわからない
    debugPrintfEXT("object index: %d", objectIndex);

    MainCameraData cameraData = MainCameraDataLoader_GetMainCameraData();
    StandardSSBO standardSSBO = RawDataLoader_LoadStandardSSBO(objectIndex);
    MeshData meshData = VertexDataLoader_GetMeshData(standardSSBO.meshDataIndex);
    debugPrintfEXT("gl_WorkGroupID: %d meshDataIndex: %d meshletCount: %d",
     gl_WorkGroupID.x, standardSSBO.meshDataIndex, meshData.meshletMetaDataCount);

    OBBData obbData = FrustumCulling_CreateOBBData(meshData.AABBMin.xyz, meshData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.rotation.xyz, standardSSBO.scale.xyz);

    if (FrustumCulling_IsVisible(obbData))
    {
        // 画面に入ってる
        for (uint i = 0; i < meshData.meshletMetaDataCount; i++)
        {
            MeshletMetaData meshletMetaData = VertexDataLoader_GetMeshletMetaData(standardSSBO.meshDataIndex, i);

            OBBData meshletObbData = FrustumCulling_CreateOBBData(meshletMetaData.AABBMin.xyz, meshletMetaData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.rotation.xyz, standardSSBO.scale.xyz);
            // SphereData sphereData = FrustumCulling_CreateBoundingSphere(meshletMetaData.AABBMin.xyz, meshletMetaData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.scale.xyz);
            
            //if (FrustumCulling_IsVisible_Sphere(sphereData))
            if (FrustumCulling_IsVisible(meshletObbData))
            {
                uint index = atomicAdd(meshletCount, 1);
                taskShaderToMeshShaderDatas[index]._using = 1;
                taskShaderToMeshShaderDatas[index].objectIndex = objectIndex;
                taskShaderToMeshShaderDatas[index].meshIndex = standardSSBO.meshDataIndex; // todo. stardardSSBOから取れるように
                taskShaderToMeshShaderDatas[index].meshletIndex = i; // todo. それぞれmeshletをカリングして、そこでとれるように        
                debugPrintfEXT("OK Task: %d objectIndex: %d MeshletID: %d", index, objectIndex, i);
            }
        }
    }
    barrier();
    debugPrintfEXT("EmitMeshTasksEXT count: %d", meshletCount);
    if (meshletCount > 0)
    {
        debugPrintfEXT("render meshletCount: %d", meshletCount);
        EmitMeshTasksEXT(meshletCount, 1, 1);
    }
}