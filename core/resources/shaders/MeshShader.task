#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : enable

#include "Loader/RawDataLoader.glsl"
#include "Loader/VertexDataLoader.glsl"
#include "Loader/Sampler2DLoader.glsl"
#include "Culling/FrustumCulling.glsl"
#include "Culling/2PhaseOcclusionCulling.glsl"

layout(push_constant) uniform PushConstant {
    uint hiZSamplerID;
    uint checkFalseNegativeMesh;
};

struct Payload {
    uint StandardSSBOIndex;
    uint MeshletIndex[2000];
};
// max: 16kb
taskPayloadSharedEXT Payload payload;

void main()
{
    uint standardSSBOIndex = gl_WorkGroupID.x;
    int mipLevel = 2;
    if (checkFalseNegativeMesh == 1)
    {
        if (standardSSBOIndex >= VertexDataLoader_GetFalseNegativeSize()) return;
        standardSSBOIndex = VertexDataLoader_GetFalseNegativeStandardSSBOIndex(gl_WorkGroupID.x);
        mipLevel = 0;
    }
    VertexDataLoader_ResetFalseNegativeSize();
    barrier();

    StandardSSBO standardSSBO = RawDataLoader_LoadStandardSSBO(standardSSBOIndex);
    MeshData meshData = VertexDataLoader_GetMeshData(standardSSBO.meshDataIndex);

    OBBData obbData = FrustumCulling_CreateOBBData(meshData.AABBMin.xyz, meshData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.rotation.xyz, standardSSBO.scale.xyz);

    uint localMeshletCount = 0;
    // Mesh単位のフラスタムカリング
    if (FrustumCulling_IsVisible(obbData))
    {
        if (TwoPhaseOcclusionCulling_IsVisible(meshData.AABBMin.xyz, meshData.AABBMax.xyz, standardSSBO, hiZSamplerID, mipLevel))
        {
            for (uint i = 0; i < meshData.meshletMetaDataCount; i++)
            {
                MeshletMetaData meshletMetaData = VertexDataLoader_GetMeshletMetaData(standardSSBO.meshDataIndex, i);

                OBBData meshletObbData = FrustumCulling_CreateOBBData(meshletMetaData.AABBMin.xyz, meshletMetaData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.rotation.xyz, standardSSBO.scale.xyz);
                // SphereData sphereData = FrustumCulling_CreateBoundingSphere(meshletMetaData.AABBMin.xyz, meshletMetaData.AABBMax.xyz, standardSSBO.position.xyz, standardSSBO.scale.xyz);

                //if (FrustumCulling_IsVisible_Sphere(sphereData))
                // Meshlet単位のフラスタムカリング
                if (FrustumCulling_IsVisible(meshletObbData))
                {
                    // フェーズ1 オクルージョンカリング (Mip1)
                    // if (TwoPhaseOcclusionCulling_IsVisible_Phase1(meshletMetaData.AABBMin.xyz, meshletMetaData.AABBMax.xyz, standardSSBO, hiZSamplerID, 1))
                    // {
                        payload.MeshletIndex[localMeshletCount] = i;
                        localMeshletCount++;
                    // }
                }
            }
        }
        // else
        // {
        //     uint falseNegativeIndex = VertexDataLoader_IncrementFalseNegativeStandardSSBOIndex();
        //     falseNegativeStandardSSBOIndex[falseNegativeIndex] = standardSSBOIndex;
        // }
    }
    barrier();
    if (localMeshletCount > 0)
    {
        debugPrintfEXT("RENDER!");
        payload.StandardSSBOIndex = standardSSBOIndex;
        EmitMeshTasksEXT(localMeshletCount, 1, 1);
    }
}