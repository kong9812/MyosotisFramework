[OK] オブジェクト選択 (fence)
[OK] IDMapをComposition subpassのinput attachmentに追加
[OK] GameStage file読み込みの実用化
　・[OK] RenderSubsystemのオブジェクトクリア
　・[OK] F3でファイル保存機能の除去
　・[OK] 最後にObjectが持つDescriptorSetをfreeする
　・[OK] DescriptorPoolをShaderBaseに追加
[OK] StageObjectとComponentの移行
　・[OK] Object -> RenderComponentBase、そしてStageObjectを新しく作る？…
　　・[OK] これが一番早い気がする…
　　・[OK] StageObject
　　　・[OK] SerializeとDeserialize
　　　・[後回し] 複数Componentの合算結果を返す
　　　　・[後回し] AABB/OBB
　　　　・[後回し] TextureList? DiscriptorList?
　　　　・[後回し] その他…
[OK] UBO-> readonly SSBO
　・[OK] バッファの扱いがもっと自由になるように…
[OK] Bindless resources(texture/buffer)
[OK] ・PushConstant
　[OK] ・VS/PSに転送する部分を分別
[OK] ・ShaderObjectをpipeline下に配置
[OK] ・GLSL関数を増やす
　[OK] ・SSBOデータのロード関連
・[OK] FrustumCullingをTaskShaderに移植
　・[OK] まずはMesh単位
　　・[OK] 今はQuadなので、頂点数制限に収まる
・[OK] 頂点関連のDescripotrSetをRenderDescriptorに移行
・[OK] 全部の頂点データはrenderResourecesから取得できるようにする
　・[OK] PrimitiveGeometryは事前に定義する
　・[OK] String, std::vector<Mesh>
　　・[OK] RenderDescriptor
　　　・[OK] uint32_t AddModel(string, std::vector<Mesh>)
　　　　・[OK] runtime mapを持つ
　　　　・[OK] 同じMesh再利用できるようにstringで判定
・[OK] ここまで来たらCustomMeshを描画する
　・[OK] FBXLoadの修正
　　・[OK] 仮頂点データの追加 (Normalなど)
　・[OK] glTFLoadの追加
・[OK] 描画ができたら、Meshlet分割
・[OK] FBXのMeshlet対応
・Meshletの単体カリング

・InteriorObejctをStaticMesh化
・buffer_referenceで頂点情報を保管
・FrustumCullingPipelineを作成

StageObjectの親子関係
Visibility Buffer
Mesh Shader
2-phase occlusion culling
